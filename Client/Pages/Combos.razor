@page "/Combos"
@using Client.Shared

<PageTitle>@Constants.TitlePrefix Combos</PageTitle>

<MudContainer>
    <MudText>
        The combos on this page have a very deliberate ordering to them. It is highly recommended that you do not advance
        past a combo section until you've learned everything in the previous section, though feel free to move around
        within sections. However, I'd like to talk a little bit about what I mean when I say you've "learned" the combo.
        To have successfully learned a combo, you should be consistently landing the
        whole combo and performing the right safejump afterward almost every time you get that starting move in a real match
        against a human. Feel free to practice the combo against the AI to bridge the gap if you'd like, but it's not a
        proper substitute.
        <br/>
        <br/>
        <MudList T="string" ReadOnly>
            In summary, here are some things that disqualify you from having "learned" any given combo:
            <MudListItem>
                - you can't do it from the opposite side (you should switch sides every few attempts while practicing
                in training mode)
            </MudListItem>
            <MudListItem>- you haven't performed it in a real match</MudListItem>
            <MudListItem>- you are dropping the combo in real matches despite landing the starter</MudListItem>
            <MudListItem>- you aren't performing the proper safejump after landing the combo in real matches</MudListItem>
        </MudList>
        Remember what world-renowned martial artist Bruce Lee once said, as it rings just as true when fighting in a video
        game as it does in real life: "I fear not the man who has practiced 10,000 kicks once, but I fear the man who has
        practiced one kick 10,000 times." Consistency will win you more games than any flashy high damage combo ever will.
    </MudText>
    <br/>
    <MudExpansionPanels MultiExpansion>
        @for (int i = 0; i < AllCombos.Count; i++)
        {
            int       listIndex = i;
            ComboList list      = AllCombos[listIndex];
            <MudExpansionPanel Text="@($"#{listIndex + 1}: {list.SectionTitle}")">
                <MudGrid>
                    @for (int j = 0; j < list.Combos.Count; j++)
                    {
                        int   comboIndex = j;
                        Combo combo      = list.Combos[comboIndex];
                        <MudItem md="12" lg="6">
                            <MudCard Style="height: 100%; padding: 24px;" Outlined>
                                <MudCardContent>
                                    <BaikenCombo Id="@($"{listIndex + 1}.{comboIndex + 1}")" Combo="combo"/>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
</MudContainer>

@code {

    private record ComboList(string SectionTitle, List<Combo> Combos);

    private List<ComboList> AllCombos { get; } =
        [
            new ComboList("Your First Combos",
            [
                new Combo([Moves.fS.AddPrefix("CH"), Moves._2H, Moves.HKab, Moves.HkabH],
                          "round start fS 2H hkabh",
                          [@<span>
                               If your <BaikenMove Move="Moves.HkabH"/> goes under the opponent, you need to delay it a
                               tiny bit.
                          </span>]),
                new Combo([Moves.jS.AddPrefix("rising").AddSuffix("(CH ok)"), Moves.AirDash, Moves.jK, Moves.Youzansen],
                          "neutral jS basic conversions"),
                new Combo([Moves._2S.AddPrefix("CH"), Moves._2H, Moves.HKab, Moves.HkabH],
                          "round start CH 2S 2H hkabh",
                          [@<span>
                              If your <BaikenMove Move="Moves.HkabH"/> goes under the opponent, you need to delay it a
                              tiny bit.
                          </span>]),
                new Combo([Moves._2H, Moves.HKab, Moves.HkabH],
                          "round start 2H hkabh"),
                new Combo([Moves._5P, Moves._6K, Moves.Tatami],
                          "5P 6K tatami"),
            ]),
            new ComboList("The Next Step",
            [
                new Combo([Moves.IAD, Moves.AerialTatami, Moves.cS, Moves._2H, Moves.Tatami],
                          "tatami safejump combo"),
                new Combo([Moves.IAD, Moves.jH, Moves.cS, Moves._2H, Moves.Tatami],
                          "IAD jH cS 2H tatami"),
                new Combo([Moves.cS, Moves._2H, Moves.HKab, Moves.HkabH],
                          "cS 2H hkabh"),
                new Combo([Moves.IAD, Moves.jS, Moves.Youzansen],
                          "IAD jS yzn"),
                new Combo([Moves.cS, Moves._2H, Moves.Tatami, Moves._2S, Moves.HKab, Moves.HkabH],
                          "bnb",
                          [@<span>
                               This is the higher damage alternative to the first <BaikenMove Move="Moves.cS"/> combo
                               in this section, but if you're spending too much time getting the timing right on the 
                               <BaikenMove Move="Moves._2S"/>, it's best move on to the next section and come back later.
                          </span>]),
            ]),
            new ComboList("Now That's What I Call Hit Confirms 56",
            [
                new Combo([Moves._5K.AddPrefix("(aerial opponent)"), Moves._6H, Moves.HKab, Moves.HkabH],
                          "5K 6H hkabh",
                          [@<span>
                              <BaikenMove Move="Moves._5K"/> can often be substituted for <BaikenMove Move="Moves.cS"/>
                              for additional damage if in range.
                           </span>]),
                new Combo([Moves._2H.AddPrefix("CH"), Moves.HKab, Moves._5K, Moves._6H, Moves.HKab, Moves.HkabH],
                          "CH 2H hkab 5K 6H hkabh",
                          [@<span>
                              <BaikenMove Move="Moves._5K"/> can often be substituted for <BaikenMove Move="Moves.cS"/>
                              for additional damage if in range.
                           </span>]),
                new Combo([Moves._6K.AddPrefix("CH"), Moves.Tatami, Moves._5K, Moves._6H, Moves.HKab, Moves.HkabH],
                          "CH 6K tatami 5K 6H hkabh",
                          [@<span>
                              <BaikenMove Move="Moves._5K"/> can often be substituted for <BaikenMove Move="Moves.cS"/>
                              for additional damage if in range.
                           </span>]),
                new Combo([Moves.Tatami.AddPrefix("CH"), Moves._5K, Moves._6H, Moves.HKab, Moves.HkabH],
                          "CH tatami 5K 6H hkabh",
                          [@<span>
                              <BaikenMove Move="Moves._5K"/> can often be substituted for <BaikenMove Move="Moves.cS"/>
                              for additional damage if in range.
                           </span>]),
            ]),
        ];

}