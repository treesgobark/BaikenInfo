@page "/Combos"
@using Client.Shared

<PageTitle>@Constants.TitlePrefix Combos</PageTitle>

<MudContainer>
    <MudText>
        The combos on this page have a very deliberate ordering to them. It is highly recommended that you do not advance
        past a combo section until you've learned everything in the previous section, though feel free to move around
        within sections. However, I'd like to talk a little bit about what I mean when I say you've "learned" the combo.
        To have successfully learned a combo, you should be consistently landing the
        whole combo and performing the right safejump afterward almost every time you get that starting move in a real match
        against a human. Feel free to practice the combo against the AI to bridge the gap if you'd like, but it's not a
        proper substitute.
        <br/>
        <br/>
        <MudList T="string" ReadOnly>
            In summary, here are some things that disqualify you from having "learned" any given combo:
            <MudListItem>
                - you can't do it from the opposite side (you should switch sides every few attempts while practicing
                in training mode)
            </MudListItem>
            <MudListItem>- you haven't performed it in a real match</MudListItem>
            <MudListItem>- you are dropping the combo in real matches despite landing the starter</MudListItem>
            <MudListItem>- you aren't performing the proper safejump after landing the combo in real matches</MudListItem>
        </MudList>
        Remember what world-renowned martial artist Bruce Lee once said, as it rings just as true when fighting in a video
        game as it does in real life: "I fear not the man who has practiced 10,000 kicks once, but I fear the man who has
        practiced one kick 10,000 times." Consistency will win you more games than any flashy high damage combo ever will.
    </MudText>
    <br/>
    <MudText Typo="Typo.h5">Core Conversions</MudText>
    <MudExpansionPanels MultiExpansion>
        @for (int i = 0; i < BasicCombos.Count; i++)
        {
            int       listIndex = i;
            ComboList list      = BasicCombos[listIndex];
            <MudExpansionPanel Text="@($"#{listIndex + 1}: {list.SectionTitle}")">
                <MudGrid>
                    @for (int j = 0; j < list.Combos.Count; j++)
                    {
                        int   comboIndex = j;
                        Combo combo      = list.Combos[comboIndex];
                        <MudItem md="12" lg="6">
                            <MudCard Style="height: 100%; padding: 24px;" Outlined>
                                <MudCardContent>
                                    <BaikenCombo Id="@($"{listIndex + 1}.{comboIndex + 1}")" Combo="combo"/>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
    <br/>
    <MudText Typo="Typo.h5">Optimizations</MudText>
    <MudExpansionPanels MultiExpansion>
        @for (int i = 0; i < ExtensionCombos.Count; i++)
        {
        int       listIndex = i;
        ComboList list      = ExtensionCombos[listIndex];
        listIndex += BasicCombos.Count;
        <MudExpansionPanel Text="@($"#{listIndex + 1}: {list.SectionTitle}")">
            <MudGrid>
                @for (int j = 0; j < list.Combos.Count; j++)
                {
                int   comboIndex = j;
                Combo combo      = list.Combos[comboIndex];
                <MudItem md="12" lg="6">
                    <MudCard Style="height: 100%; padding: 24px;" Outlined>
                        <MudCardContent>
                            <BaikenCombo Id="@($"{listIndex + 1}.{comboIndex + 1}")" Combo="combo"/>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                }
            </MudGrid>
        </MudExpansionPanel>
        }
    </MudExpansionPanels>
</MudContainer>

@code {

    private record ComboList(string SectionTitle, List<Combo> Combos);

    private List<ComboList> BasicCombos { get; } =
        [
            new ComboList("The Beginning of the End (neutral starters)",
            [
                new Combo([Moves._2H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "round start 2H hkabh"),
                new Combo([Moves.fS.AddPrefix("CH "), Moves._2H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "round start fS 2H hkabh",
                          [@<span>
                               If your <BaikenMove Move="Moves.HkabH"/> goes under the opponent, you need to delay it a
                               tiny bit.
                          </span>]),
                new Combo([Moves.jS.AddPrefix("rising "), Moves.AirDash, Moves.jK, Moves.Youzansen, Moves.IAD, Moves.jH.AddSuffix(" (Safejump)")],
                          "neutral jS basic conversions",
                          [@<span>
                               If the initial <BaikenMove Move="Moves.jS"/> is a counter hit, the combo will still work,
                               but you need to do a <BaikenMove Move="Moves.AerialTatami">Tatami</BaikenMove>
                               safejump instead.
                          </span>]),
                new Combo([Moves._2S.AddPrefix("CH "), Moves._2H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "round start CH 2S 2H hkabh",
                          [@<span>
                              If your <BaikenMove Move="Moves.HkabH"/> goes under the opponent, you need to delay it a
                              tiny bit.
                          </span>]),
                new Combo([Moves._6P.AddPrefix("Grounded CH "), Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")]),
            ]),
            new ComboList("The Reward for Your Patience (punishes and combos from defense)",
            [
                new Combo([Moves._5P, Moves._6K, Moves.Tatami, Moves.IAD, Moves.jH.AddSuffix(" (Safejump)")],
                          "5P 6K tatami"),
                new Combo([Moves._2K, Moves._6K, Moves.Tatami, Moves.IAD, Moves.jH.AddSuffix(" (Safejump)")]),
                new Combo([Moves._5K, Moves._6K, Moves.Tatami, Moves.IAD, Moves.jH.AddSuffix(" (Safejump)")]),
                new Combo([Moves.cS, Moves.fS, Moves._5H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          ""),
                new Combo([Moves.IAD, Moves.jS, Moves.Youzansen, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "IAD jS yzn",
                          [@<span>
                               It's a good idea to spend some time in training mode practicing doing a delay on your
                               <BaikenMove Move="Moves.Youzansen"/>. You want it to come out as late as possible without
                               getting cancelled too early that it doesn't hit. This will help you immensely both on
                               hit and on block by giving you more advantage.
                           </span>]),
            ]),
            new ComboList("The Never-Ending Vortex (hit confirms in pressure)",
            [
                new Combo([Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)"), Moves.cS, Moves._2H, Moves.Tatami, Moves.IAD, Moves.jH.AddSuffix(" (Safejump)")],
                          "tatami safejump combo"),
                new Combo([Moves.IAD, Moves.jH.AddSuffix(" (Safejump)"), Moves.cS, Moves._2H, Moves.Tatami, Moves.IAD, Moves.jH.AddSuffix(" (Safejump)")],
                          "IAD jH cS 2H tatami"),
                new Combo([Moves._5K.AddPrefix("(aerial opponent) "), Moves._6H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "5K 6H hkabh",
                          [@<span>
                              <BaikenMove Move="Moves._5K"/> can often be replaced by <BaikenMove Move="Moves.cS"/>
                              for additional damage if in range.
                           </span>]),
                new Combo([Moves._2H.AddPrefix("CH "), Moves.HKab, Moves._5K, Moves._6H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "CH 2H hkab 5K 6H hkabh",
                          [@<span>
                              <BaikenMove Move="Moves._5K"/> can often be replaced by <BaikenMove Move="Moves.cS"/>
                              for additional damage if in range.
                           </span>]),
                new Combo([Moves._6K.AddPrefix("CH "), Moves.Tatami, Moves._5K, Moves._6H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "CH 6K tatami 5K 6H hkabh",
                          [@<span>
                              <BaikenMove Move="Moves._5K"/> can often be replaced by <BaikenMove Move="Moves.cS"/>
                              for additional damage if in range.
                           </span>]),
                new Combo([Moves.Tatami.AddPrefix("CH "), Moves._5K, Moves._6H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "CH tatami 5K 6H hkabh",
                          [@<span>
                              <BaikenMove Move="Moves._5K"/> can often be replaced by <BaikenMove Move="Moves.cS"/>
                              for additional damage if in range.
                           </span>]),
            ]),
            new ComboList("Crouching Tiger, Hidden Knee (TK yzn combos)",
            [
                new Combo([Moves.TkYouzansen, Moves.RedRc, Moves.cS, Moves._6H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "yzn RRC cS 6H hkabh",
                          [@<span>
                               Simple and effective. You don't need anything fancier than this. Optionally, insert an
                               additional <BaikenMove Move="Moves.cS"/> after
                              the first <BaikenMove Move="Moves.cS"/> for more damage and corner carry. This requires
                              either a dash cancel or a normal dash to get in range.
                           </span>]),
                new Combo([Moves.TkYouzansen, Moves.DriftRedRc.AddPrefix("22"), Moves.AerialTatami.AddPrefix("IAD "),
                              Moves.cS, Moves._6H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "yzn 22RRC IAD tatami cS 6H hkabh",
                          [@<span>
                               More corner carry than the non-drift version and a better situation on block.
                           </span>]),
                new Combo([Moves.TkYouzansen, Moves.FastRrc.AddPrefix("66"), Moves.jH,
                              Moves.cS, Moves._6H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "yzn FRC jH cS 6H hkabh",
                          [@<span>
                               Reduced corner carry in exchange for reduced tension usage and a great situation on
                               block. (+4 at minimum after <BaikenMove Move="Moves.jH"/>, mix available, see the
                               <MudLink Href="TKYouzansen">TK Youzansen</MudLink> page for more details)
                           </span>]),
            ]),
        ];

    private List<ComboList> ExtensionCombos { get; } =
        [
            new ComboList("Punishes",
            [
                new Combo([Moves.cS, Moves._2H, Moves.Tatami, Moves.Dash, Moves.cS, Moves._6H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")]),
                new Combo([Moves.cS, Moves._2H, Moves.Tatami, Moves._2S, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "bnb",
                          [@<span>
                               Less damage but leaves opponent at favorable spacing for some <GlossaryLink Term="Oki"/>
                               setups like <MudLink Href="KabariSideslash"/>.
                           </span>]),
            ]),
            new ComboList("TK yzn",
            [
                new Combo([Moves.TkYouzansen, Moves.FastRrc.AddPrefix("66"), Moves.jH,
                              Moves._5K, Moves.jS, Moves.jD, Moves.AirDash, Moves.jS, Moves.jH, Moves.cS,
                              Moves._6H.AddSuffix(" (Wallbreak)")], "yzn FRC jH 5K jS jD jS jH 5P",
                          [@<span>
                               Midscreen to corner combo from <BaikenMove Move="Moves.TkYouzansen"/> that does not
                               require normal jump TK. Video shows 5P ender but <BaikenMove Move="Moves.cS"/> is more
                               consistent. I just haven't updated the video yet. Sue me.
                           </span>]),
                new Combo([Moves.TkYouzansen, Moves.FastRrc.AddPrefix("66"), Moves.jH, Moves.jS,
                              Moves.ForwardJumpCancel, Moves.jS, Moves.jH, Moves.AerialTatami, Moves.cS, Moves._6H,
                              Moves.HKab, Moves.HkabH.AddSuffix(" (Wallbreak)")], "ladder corner",
                          [@<span>
                               Also known as the ladder combo. Optimal damage and corner carry from midscreen. Requires
                               normal jump TK yzn. See <MudLink Href="TKYouzansen">TK Youzansen</MudLink> for more
                               details. Video is outdated, the 5H is now 6H in season 4.
                           </span>]),
                new Combo([Moves.TkYouzansen, Moves.FastRrc.AddPrefix("66"), Moves.jH, Moves.jD,
                              Moves.AerialTatami, Moves.Jump, Moves.jD, Moves.AirDash, Moves.jD, Moves.Youzansen,
                              Moves.jD.AddSuffix(" (Wallbreak)")], "yzn FRC jH jD tatami jD jD yzn",
                          [@<span>
                               Corner-specific optimization for tk yzn. Also, it's pretty saucy.
                           </span>]),
            ]),
            new ComboList("Rising j.S",
            [
                new Combo([Moves.jS.AddPrefix("Rising CH "), Moves.AirDash, Moves.jP, Moves.AerialTatami, Moves._5K,
                              Moves.ForwardJumpCancel, Moves.jS, Moves.jD, Moves.AirDash, Moves.jS, Moves.jH, Moves._5P,
                          Moves._6H.AddSuffix(" (Wallbreak)")],
                          "rising ch jS jP tatami 5K jS jD jS jH 5P",
                          [@<span>
                               Must be about midscreen or closer to corner. May rarely work on normal hit, depends on
                               height.
                           </span>]),
                new Combo([Moves.jS.AddPrefix("Rising CH "), Moves.AirDash, Moves.jP, Moves.AerialTatami, Moves._5K,
                              Moves._6H, Moves.HKab, Moves.HkabH, Moves.IAD, Moves.AerialTatami.AddSuffix(" (Safejump)")],
                          "rising ch jS jP tatami 5K 6H hkabh",
                          [@<span>
                               Non-corner version of previous combo. May rarely work on normal hit, depends on height.
                           </span>]),
            ]),
        ];

}